/*
	Напишите шаблонный класс Deque, содержащий следующий набор методов:
	*	конструктор по умолчанию;
	*	константный метод Empty, возвращающий true, если дек не содержит ни одного элемента;
	*	константный метод Size, возвращающий количество элементов в деке;
	*	T& operator[](size_t index) и const T& operator[](size_t index) const;
	*	константный и неконстантный метод At(size_t index),
			генерирующий стандартное исключение out_of_range, если индекс больше или равен количеству элементов в деке;
	*	константные и неконстантные версии методов Front и Back, возвращающих ссылки на первый и последний элемент дека соответственно;
	*	методы PushFront и PushBack.
	
	Неконстантные версии методов должны позволять изменять соответствующий элемент дека.
	
	Для реализации заведите внутри класса Deque два вектора:
		в один осуществляйте вставку в методе PushFront, а в другой — в методе PushBack.
		
	Замечание
	Заголовочный файл, который вы пришлёте на проверку, не должен подключать файлы <list>, <deque>, <set>, <map>.
	Если у вас будет подключен один из этих файлов, вы получите ошибку компиляции.
*/
#include "Deque.h"
#include "test_runner.h"
#include "tests.h"

#include <iostream>

int main()
{
	TestRunner tr;
	RUN_TEST(tr, TestEmpty);
	RUN_TEST(tr, TestSize);
	RUN_TEST(tr, TestOperator);
	RUN_TEST(tr, TestAt);
	RUN_TEST(tr, TestFront);
	RUN_TEST(tr, TestBack);

	return 0;
}